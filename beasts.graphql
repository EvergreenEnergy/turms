input BeastInput {
  id: ID
  legs: Int
  binomial: String
  commonName: String
  taxClass: String
  eats: [ID]
}

input CountryInput {
  id: ID
  nana: String
}

type Beast {
  "ID of beast (taken from binomial initial)"
  id: ID
  "number of legs beast has"
  legs: Int
  "a beast's name in Latin"
  binomial: String
  "a beast's name to you and I"
  commonName: String
  "taxonomy grouping"
  taxClass: String
  "a beast's prey"
  eats: [Beast]
  "should be a beast, but can be a plant"
  isEatenBy: [Beast]

  "farts a lot"
  farts: Boolean

  maybe_ne_farts: Boolean
}

type Query {
  """
  get all the beasts on the server
  """
  beasts: [Beast]
  beast(id: ID!): Beast!
  calledBy(commonName: String!): [Beast]!
}

type Mutation {
  """
  create a massive beast on the server
  """
  createBeast(
    id: ID!
    legs: Int!
    binomial: String!
    commonName: String!
    taxClass: String!
    eats: [ID]
  ): Beast!

  createBeastInput(beast: BeastInput!): Beast!
}

type Subscription {
  watchBeast(id: ID!): Beast
}
